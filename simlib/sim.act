/*************************************************************************
 *
 *  This file is part of ACT standard library
 *
 *  Copyright (c) 2022 Rajit Manohar
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 **************************************************************************
 */
namespace sim {

export template<pint W, V>
defproc source (chan!(int<W>) O)
{
  chp {
    *[ O!V ]
  }
}

export template<pint W; pbool REP; pint N; pint data[N]>
defproc source_seq(chan!(int<W>) O)
{
  int i;
  chp {
    *[ i := 0; *[ i < N -> [([]k:N: i=k -> O!data[k])]; i := i + 1 ] <- REP ]
  }
}
  
export template<pbool LOG; pint W>
defproc sink(chan?(int<W>) I)
{
  int x;
  chp {
    *[ I?x; [LOG -> log("sink: ", x, "%x (0x", x, ")") [] else -> skip ] ]
  }
}

export function file_read(int<32> idx) : int<64>;
export function file_eof(int<32> idx) : bool;
export function file_close(int<32> idx) : bool;

/* this assume that the file has at least one value in it */
export template<pint ID; pbool LOOP; pint W>
defproc file_source(chan!(int<W>) O)
{
  bool dummy;
  chp {
    *[ *[ O!file_read(ID) <- ~file_eof (ID) ]; dummy := file_close(ID) <- LOOP ];
     log ("Source file #", ID, " ends.")
  }
}

export template<pint ID; pbool LOOP; pint W>
defproc check_sink(chan?(int<W>) I)
{
  int<W> x, y;
  bool dummy;
  chp {
    *[ *[ I?x;
          y := file_read(ID);
         [ x = y -> skip
         [] else -> log ("ASSERTION failed, value mismatch; expected: ", y, "%x (0x", y, "); got: ", x, "%x (0x", x, ")")
         ]
	  <- ~file_eof(ID)
       ] <- LOOP
    ];
    log ("Sink file #", ID, " ends.")
  }
}

}
