/*************************************************************************
 *
 *  This file is part of ACT standard library
 *
 *  Copyright (c) 2024 Fabian Posch
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 **************************************************************************
 */

namespace sim {

/*
 * Simple sink with logging functionality
 *
 * Use this if you need the simplest of sinks
 *
 * Ports:
 * - I: Token input
 * - enable: sink only consumes if flag set to true
 *
 * Features:
 * - Token logging
 *
 * Parameters:
 * - D_WIDTH: Data output bus width
 * - SINK_ID: ID of the sink (used in log output)
 * - LOG: Logger enable parameter
 *
 */
export template<pint D_WIDTH, SINK_ID; pbool LOG>
defproc sink (chan?(int<D_WIDTH>) I; bool enable)
{
    int<D_WIDTH> buf;

    chp {
        *[
            // wait for sink to get enabled
            [enable];

            // receive the data
            I?buf;

            // check if we are should log it
            [ LOG ->
                log ("Sink ", SINK_ID, ": Received value ", buf, "%x (0x", buf, ")")
            [] else ->
                skip
            ]
        ]
    }
}

// external C functions for file interaction
namespace file_private {
export function openw (int<32> file_id) : int<32>;
export function write_sink (int<32> writer_id; int<8> verbosity; int<32> sink_id; int<64> val) : bool;
}

/*
 * Simple sink with file logging functionality
 *
 * Use this if you need a simple sink that can dump
 * received tokens into a log file
 *
 * Ports:
 * - I: Token input
 * - enable: sink only consumes if flag set to true
 *
 * Features:
 * - Token logging into file
 *
 * Parameters:
 * - D_WIDTH: Data output bus width
 * - SINK_ID: ID of the sink (used in log output)
 * - F_ID: ID of the file to save into
 * - VERBOSITY: Verbosity with which to print to the file
 * - LOG: Logger enable parameter
 *
 */
export template<pint D_WIDTH, SINK_ID, VERBOSITY, F_ID; pbool LOG>
defproc sink_file (chan?(int<D_WIDTH>) I; bool enable)
{
    int<D_WIDTH> buf;
    bool success;
    int write_id;

    chp {

        // if logging is enabled, create the log file
        [ LOG ->
            write_id := file_private::openw (F_ID);
            assert (write_id != 0, "Sink ", SINK_ID, " failed to open output file with ID ", F_ID, "!")
        [] else ->
            skip
        ];

        // receive the data and dump it into the file
        *[
            // wait for sink to be enabled
            [enable];

            I?buf;

            [ LOG ->
                success := file_private::write_sink (write_id, VERBOSITY, SINK_ID, buf);
                assert (success, "Sink ", SINK_ID, " failed to write to output file!")
            [] else ->
                skip
            ]
        ]
    }
}

}
