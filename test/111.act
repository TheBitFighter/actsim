template<pint A,B>
deftype fxp (int<A+B> x)
{
  methods {
    function plus(fxp<A,B> rhs) : fxp<A,B>
    {
       chp {
          self.x := rhs.x + x
       }
    }
    function minus(fxp<A,B> rhs) : fxp<A,B>
    {
       chp {
          self.x := x + (~rhs.x + 1)
       }
    }
    function mult(fxp<A,B> rhs) : fxp<A,B>
    {
      bool sx, sy;
      chp {
        [ x{A+B-1} = 1 -> sx+; x := ~x + 1 [] else -> sx- ];
        [ rhs.x{A+B-1} = 1 -> sy+; rhs.x := ~rhs.x + 1 [] else -> sy- ];
        self.x := (x * rhs.x) >> B;
        [ sx != sy -> self.x := ~self.x + 1 [] else -> skip ]
      }
    }
    function truncate() : int<A>
    {
      chp {
        self := x >> B
      }
    }

    function tofxp(preal v) : pint
    {
    chp {
        [ v >= 0.0 -> self := int(v * (1 << B) + 0.5)
       [] else -> self := int(-v * (1 << B) + 0.5);
            self := (1 << (A+B)) - self
        ]
      }
    }

    function divisor() : pint
    {
      chp {
        self := (1 << B)
      }
    }
    function fraction() : int<B>
    {
      chp {
        self := x & int((1 << B)-1,B)
      }
    }

    macro set(int<A+B> v)
    {
      x := v
    }

    macro log() 
    {
      log_st("");
      [ x{A+B-1} = 1 -> log_p("-", int(~x+1,A+B)>>B) [] else -> log_p("+", x >> B) ];
      log_p (".{", (x{A+B-1} = 1 ? int(~x+1,A+B) : x) & int((1 << B)-1,B), "/", (1 << B), "}");
      log_nl("")
    }
  }
}


defproc test()
{
  fxp<5,2> a, b;
  int<5> x;

  chp {
    a.set(a.tofxp(2.0));
    b.set(b.tofxp(1.5));
    a := a * b;
    log ("got fxp: ", a.truncate(), " plus ", a.fraction(), " / ", a.divisor());
    a := a * b;
    log ("got fxp: ", a.truncate(), " plus ", a.fraction(), " / ", a.divisor());
    b.set(b.tofxp(0.0));
    a.log();
    a := b - a;
    a.log()
  }
}
